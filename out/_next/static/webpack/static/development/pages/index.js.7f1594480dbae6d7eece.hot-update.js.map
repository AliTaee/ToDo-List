{"version":3,"file":"static/webpack/static/development/pages/index.js.7f1594480dbae6d7eece.hot-update.js","sources":["webpack:///./src/components/note/CreateNote.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Materail UI\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n// Redux\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { addTask } from '../../redux/actions/actionTasks';\n\nconst CreateNotes = props => {\n  let titleNote = useRef(null);\n\n  const [taskName, setTaskTitle] = useState('');\n  const [taskContent, setTaskContent] = useState('');\n  const [taskNameRequired, setError] = useState([false]);\n  const [successCreate, setMassage] = useState([false]);\n\n  useEffect(() => {}, []);\n\n  const createNote = event => {\n    event.preventDefault();\n\n    if (taskName === '' || taskName === undefined) {\n      titleIsEmpty();\n      return;\n    }\n\n    const newTask = {\n      title: taskName,\n      content: taskContent,\n    };\n\n    props.addTask(newTask);\n\n    clearForm();\n  };\n\n  const titleIsEmpty = () => {\n    setError(true);\n    setMassage(false);\n    titleNote.current.focus();\n  };\n\n  const handleTaskName = e => {\n    setTaskTitle(e.target.value);\n  };\n\n  const handleTaskContent = e => {\n    setTaskContent(e.target.value);\n  };\n\n  const clearForm = () => {\n    setTaskTitle('');\n    setTaskContent('');\n    setError(false);\n    setMassage(true);\n    titleNote.current.focus();\n  };\n\n  return (\n    <section id=\"create-note\">\n      <h2>Add Note</h2>\n      <form noValidate autoComplete=\"off\">\n        <TextField\n          required\n          label=\"Note Title\"\n          classes={{ root: 'note-titile' }}\n          variant=\"filled\"\n          type=\"text\"\n          id=\"title-task\"\n          fullWidth\n          ref={textInput}\n          inputRef={titleNote}\n          onChange={handleTaskName}\n          error={taskNameRequired === true}\n          value={taskName}\n          name=\"text\"\n        />\n        <TextField\n          multiline\n          label=\"Note Content\"\n          classes={{ root: 'note-desc' }}\n          variant=\"filled\"\n          type=\"text\"\n          id=\"content-task\"\n          fullWidth\n          rows={6}\n          margin=\"normal\"\n          onChange={handleTaskContent}\n          value={taskContent}\n          aria-label=\"note content\"\n        />\n        <Button onClick={createNote} type=\"submit\" variant=\"contained\" color=\"primary\">\n          Create Note\n        </Button>\n      </form>\n      {successCreate === true && <p className=\"mobile success message\">Note saved successfully.</p>}\n    </section>\n  );\n};\n\nCreateNotes.propTypes = {\n  addTask: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTask: bindActionCreators(addTask, dispatch),\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(CreateNotes);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}